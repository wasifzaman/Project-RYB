'''
'''
from widget_ import Widget_
from tkinter import *

class Notebook_(Widget_):

	def __init__(self, parent_frame, x, y):
		Widget_.__init__(self, parent_frame, x, y)
		self.tab_bg = 'grey'
		self.last_tab_id = 0
		self.tabs = {}
		self.tab_wins = {}
		self.tab_frame = Frame(self.widget_frame)
		self.tab_win_container = Frame(self.widget_frame, bg='red')
		self.tab_win_frame = Frame(self.tab_win_container)
		self.tab_frame.pack(anchor=NW, fill=X, padx=(3, 0))
		self.tab_win_container.pack(fill=BOTH)
		self.tab_win_frame.pack(padx=1, pady=(1, 1))
		self.widget_frame.grid(sticky=N+W)

	def show_tab(self, tab_id):
		self.tab_wins[self.cur_tab].pack_forget()
		self.tabs[self.cur_tab]['tab'].pack(ipady=0)
		self.tab_wins[tab_id].pack(fill=BOTH)
		self.tabs[tab_id]['tab'].pack(ipady=1)
		self.cur_tab = tab_id

	def settings(self, **kwargs):
		if 'add_tab' in kwargs:
			'''
			add_tab takes 2 inputs, tab name and assosicating frame
			tab_outer is frame containging the tab. It's there for borders
			tab_props are properties of the tab to add
				tab_id key is unique key generated by adding to last_tab_id

			'''
			tab_name = kwargs['add_tab'][0]
			frame_ = kwargs['add_tab'][1]

			tab_outer = Frame(self.tab_frame, bg=self.tab_bg)
			tab_props = {
				'tab_outer': tab_outer,
				'tab': Label(tab_outer, text=tab_name),
				'tab_id': self.last_tab_id
				}

			tab_props['tab'].pack(padx=1, pady=(1, 0))
			tab_props['tab'].bind('<Button-1>', lambda event: self.show_tab(tab_props['tab_id']))
			tab_props['tab_outer'].pack(side=LEFT, anchor=S)

			if not hasattr(self, 'cur_tab'):
				#if tab is first tab, display tab
				self.cur_tab = tab_props['tab_id']
				tab_props['tab'].pack(ipady=1)
				frame_.pack(fill=BOTH)

			self.tab_wins[self.last_tab_id] = frame_
			self.tabs[self.last_tab_id] = tab_props
			self.last_tab_id += 1
		if 'tab_border' in kwargs:
			self.tab_bg = kwargs['tab_border']
			for tab in self.tabs.values():
				tab['tab_outer'].config(bg=self.tab_bg)